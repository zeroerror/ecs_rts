//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZeroHero {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using UnityEngine;
    using Unity.Mathematics;
    using UnityEngine.Networking;
    using System.Text;
    
    
    [Serializable()]
    public class UICfg {
        
        [XmlAttribute("UIName")]
        public string UIName{ get; set; }//;
        
        [XmlAttribute("Layer")]
        public string Layer{ get; set; }//;
        
        [XmlAttribute("AssetPath")]
        public string AssetPath{ get; set; }//;
        
        [XmlAttribute("AssetName")]
        public string AssetName{ get; set; }//;
    }
    
    public struct UIStruct {
        
        public string UIName;
        
        public string Layer;
        
        public string AssetPath;
        
        public string AssetName;
    }
    
    public sealed class UICfgMgr {
        
        private static SerializableDictionary<string, UICfg> uiCfgDic;
        
        public static void Init() {
            var uri = new System.Uri(Path.Combine(Application.streamingAssetsPath, "xml","UI表.xml"));
            var request = UnityWebRequest.Get(uri.AbsoluteUri);
            request.SendWebRequest();
            while (!request.isDone){ if (request.isNetworkError) { Debug.Log(request.error); return;}};
            byte[] bytes = Encoding.UTF8.GetBytes(request.downloadHandler.text);
            MemoryStream stream = new MemoryStream();
            stream.Write(bytes, 0, bytes.Length);
            stream.Position = 0;
            XmlSerializer xmlFormatter = new XmlSerializer(typeof(SerializableDictionary<string, UICfg>));;
            uiCfgDic = (SerializableDictionary<string, UICfg>)xmlFormatter.Deserialize(stream);;
            stream.Close();;
        }
        
        public static UICfg GetByUIName(string uiname) {
            if (!uiCfgDic.TryGetValue(uiname, out UICfg cfg)) {
              Debug.LogError("UI表: 配置表出错, 不存在id: "+uiname );    
              return null;
            }
            return cfg;
        }
        
        public static List<UICfg> GetConfigList() {
            List<UICfg> list = new List<UICfg>();
            foreach (var item in uiCfgDic){list.Add(item.Value);};
            return list;
        }
    }
}
